@page "/createproduct"
@using ShopProject.Shared.Dtos
@using ShopProject.Shared.ViewModels
@using ShopProject.Client.ApiBrokers
@using System.Text.Json
@using System.Text
@using System.Net.Http.Headers
@inject IProductCategoriesApi ProductCategoriesApi
@inject IProductApi ProductApi
@inject HttpClient Http


<div class="container">
    <h3>Utwórz produkt</h3>
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <EditForm Model="@CreateDto" OnSubmit="CreateProductOnSubmit">
                        <div class="input-group mb-3">
                            <span for="productName" class="input-group-text">Nazwa produktu</span>
                            <InputText id="productName" @bind-Value="CreateDto.ProductName" class="form-control"/>
                        </div>

                        <div class="input-group mb-3">
                            <span for="productDescription" class="input-group-text">Opis produktu</span>
                            <InputText id="productDescription" @bind-Value="CreateDto.ProductDescription" class="form-control"/>
                        </div>

                        <div class="input-group mb-3">
                            <span for="productPrice" class="input-group-text">Cena produktu</span>
                            <InputNumber id="productPrice" @bind-Value="CreateDto.ProductPrice" class="form-control"/>
                        </div>

                        <div class="input-group mb-3">
                            <span for="categories" class="input-group-text">Kategorie</span>
                            <select id="categories" class="form-select" @bind="SelectedCategories" multiple>
                                @foreach (var category in ProductCategoryListViewModel.ProductCategories)
                                {
                                    <option value="@category.Id">@category.CategoryName</option>
                                }
                            </select>
                        </div>

                        <div class="input-group mb-3">
                            <span class="input-group-text" for="FileInput">Pliki</span>
                            <InputFile id="FileInput" class="form-control" multiple OnChange="HandleFileInput"/>
                        </div>

                        <button type="submit" class="btn btn-primary mb-2">Utwórz produkt</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string[] SelectedCategories { get; set; } = { };
    private CreateProductDto CreateDto = new ();
    private ProductCategoryListViewModel ProductCategoryListViewModel { get; set; } = new();
    private IReadOnlyList<IBrowserFile> files;

    protected override async Task OnInitializedAsync()
    {
        ProductCategoryListViewModel = await ProductCategoriesApi.GetListProductCategories();
    }

    private void HandleFileInput(InputFileChangeEventArgs e)
    {
        files = e.GetMultipleFiles();
    }

    private async void CreateProductOnSubmit()
    {
        var content = new MultipartFormDataContent()
        {
            { new StringContent(CreateDto.ProductName), "ProductName" },
            { new StringContent(CreateDto.ProductDescription), "ProductDescription" },
            { new StringContent(CreateDto.ProductPrice.ToString()), "ProductPrice" },
        };

        foreach (var selectedCategory in SelectedCategories)
        {
            content.Add(new StringContent(selectedCategory), "Categories");
        }
        
        foreach (var file in files)
        {
            StreamContent fileContent = new StreamContent(file.OpenReadStream());
            fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data")
            {
                Name = "\"Files\"",
                FileName = $"\"{file.Name}\""
            };
            fileContent.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");

            content.Add(fileContent);
        }

        await ProductApi.CreateProduct(content);
    }
}