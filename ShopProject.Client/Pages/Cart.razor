@page "/Cart"
@using ShopProject.Client.Services
@using ShopProject.Shared.Dtos
@using ShopProject.Shared.ViewModels
@using ShopProject.Client.ApiBrokers
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICartService CartService
@inject IPaymentBroker PaymentBroker
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory

<div class="container">
    <div class="row mb-3">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="container-fluid">
                        @foreach (var product in Products)
                        {
                            <div class="row mb-3 text-center">
                                <div class="col-md-2">
                                    <img src="https://localhost:6001/api/files/@product.ImageId" style="max-height: 100px"/>
                                </div>
                                <div class="col-md-4">
                                    <h4>@product.ProductName</h4>
                                </div>
                                <div class="col-md-4">
                                    <h4>@product.ProductPrice</h4>
                                </div>
                                <div class="col-md-2">
                                    <button class="btn btn-danger" @onclick="() => RemoveFromCart(product.ProductId)">Usuń z koszyka</button>
                                </div>
                            </div>
                        }
                        <div class="row mb-3 text-center">
                            <div class="col-4">

                            </div>
                            <div class="col-2">
                                <h4>Suma:</h4>
                            </div>
                            <div class="col-4">
                                <h4>@Products.Sum(x => x.ProductPrice)</h4>
                            </div>
                            <div class="col-2">

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h2>Szczegóły dostawy</h2>
                </div>
                <div class="card-body">
                    <div class="input-group mb-3">
                        <span class="input-group-text">Email</span>
                        <InputText type="email" class="form-control" @bind-Value="Email"/>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row mb-3">
        <div class="form-check">
            <input id="regulationCheckbox" type="checkbox" @bind="IsAgree"/>
            <label class="form-check-label" for="regulationCheckbox">Akceptuję <a @onclick="GoToRegulations" style="color: dodgerblue; text-decoration-line: underline;">regulamin</a></label>
        </div>
        <span class="text-danger">@AgreeErrorMessage</span>
    </div>
    <div class="row mb-3">
        <div class="col-12 text-center">
            <a class="btn btn-success" @onclick="Pay">Zapłać</a>
        </div>
    </div>
</div>


@code {
    public string Email { get; set; } = string.Empty;

    public bool IsAgree { get; set; } = false;
    public string AgreeErrorMessage { get; set; } = string.Empty;

    public List<ProductMinimumInfoDto> Products { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Products = await CartService.GetProductsFromInCart();
    }

    private async Task RemoveFromCart(Guid productId)
    {
        await CartService.RemoveFromCart(productId);
        Products = await CartService.GetProductsFromInCart();
    }

    public async Task Pay()
    {
        if (!IsAgree)
        {
            AgreeErrorMessage = "Musisz zaakceptować regulamin";
            return;
        }
        else
        {
            AgreeErrorMessage = string.Empty;
        }

        var vm = new CartPaymentVm();
        vm.Email = Email;
        vm.Items = Products.Select(x => new CartItemDto()
            {
                Id = x.ProductId,
                Quantity = 1
            })
            .ToList();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        string responseUrl = string.Empty;

        if (user.Identity.IsAuthenticated)
        {
            responseUrl = await PaymentBroker.PostPaymentAsync(vm);
        }
        else
        {
            var noAuthenticationClient = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
            var response =
                await noAuthenticationClient
                    .PostAsJsonAsync("https://localhost:6001/api/payment/create-checkout-session", vm);

            if (response.IsSuccessStatusCode)
            {
                responseUrl = await response.Content.ReadAsStringAsync();
            }
        }

        if (!string.IsNullOrEmpty(responseUrl))
        {
            NavigationManager.NavigateTo(responseUrl);
        }
    }

    private void GoToRegulations()
    {
        NavigationManager.NavigateTo($"/Regulations");
    }

}