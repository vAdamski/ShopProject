@page "/productsManager"
@using ShopProject.Shared.ViewModels
@using ShopProject.Client.ApiBrokers
@using ShopProject.Shared.Dtos
@using System.Net.Http.Headers
@inject IProductApi ProductApi
@inject NavigationManager NavigationManager;
@inject IProductCategoriesApi ProductCategoriesApi

<AuthorizeView Policy="Admin" Context="authContext">
    <Authorized>
        <div class="container-fluid">
            <div class="row">
                <div class="col-12 mb-2">
                    <div class="card">
                        <div class="card-header text-center">
                            Dodaj produkt
                        </div>
                        <div class="card-body">
                            <EditForm Model="@CreateDto" OnSubmit="CreateProductOnSubmit">
                                <div class="input-group mb-3">
                                    <span for="productName" class="input-group-text">Nazwa produktu</span>
                                    <InputText id="productName" @bind-Value="CreateDto.ProductName" class="form-control"/>
                                </div>

                                <div class="input-group mb-3">
                                    <span for="productDescription" class="input-group-text">Opis produktu</span>
                                    <InputText id="productDescription" @bind-Value="CreateDto.ProductDescription" class="form-control"/>
                                </div>

                                <div class="input-group mb-3">
                                    <span for="productPrice" class="input-group-text">Cena produktu</span>
                                    <InputNumber id="productPrice" @bind-Value="CreateDto.ProductPrice" class="form-control"/>
                                </div>

                                <div class="input-group mb-3">
                                    <span for="categories" class="input-group-text">Kategorie</span>
                                    <select id="categories" class="form-select" @bind="SelectedCategories" multiple>
                                        @foreach (var category in ProductCategoryListViewModel.ProductCategories)
                                        {
                                            <option value="@category.Id">@category.CategoryName</option>
                                        }
                                    </select>
                                </div>

                                <div class="input-group mb-3">
                                    <span class="input-group-text" for="FileInput">Pliki</span>
                                    <InputFile id="FileInput" class="form-control" multiple OnChange="HandleFileInput"/>
                                </div>

                                <button type="submit" class="btn btn-primary mb-2">Utwórz produkt</button>
                            </EditForm>
                        </div>
                    </div>
                </div>
                <div class="col-12 mb-2">
                    <div class="card">
                        <div class="card-header text-center">
                            Lista produktów
                        </div>
                        <div class="card-body">
                            <div class="container-fluid">
                                <div class="row">
                                    @foreach (var product in ViewModel.Products)
                                    {
                                        <div class="col-12 mb-3" style="max-height: 100px">
                                            <div class="container-fluid">
                                                <div class="row">
                                                    <div class="col-3">
                                                        <img src="https://localhost:6001/api/files/@product.Images.FirstOrDefault().Id" style="max-height: 100px"/>
                                                    </div>
                                                    <div class="col-3">
                                                        <h4>@product.ProductName</h4>
                                                        <p>@product.ProductDescription</p>
                                                    </div>
                                                    <div class="col-3">
                                                        <h2>@product.ProductPrice</h2>
                                                    </div>
                                                    <div class="col-3">
                                                        <button class="btn btn-primary" @onclick="() => RedirectToEditProduct(product.ProductId)">Edytuj</button>
                                                        <button class="btn btn-danger" @onclick="() => DeleteProduct(product.ProductId)">Usuń</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        Not authorized!
    </NotAuthorized>
</AuthorizeView>


@code {
    private EditableProductsListViewModel ViewModel { get; set; } = new();
    private string[] SelectedCategories { get; set; } = { };
    private CreateProductDto CreateDto = new();
    private ProductCategoryListViewModel ProductCategoryListViewModel { get; set; } = new();
    private IReadOnlyList<IBrowserFile> files;

    protected override async Task OnInitializedAsync()
    {
        ViewModel = await ProductApi.GetEditableProducts();
        ProductCategoryListViewModel = await ProductCategoriesApi.GetListProductCategories();
    }

    private void RedirectToEditProduct(Guid productId)
    {
        NavigationManager.NavigateTo($"/editproduct/{productId}");
    }

    private void HandleFileInput(InputFileChangeEventArgs e)
    {
        files = e.GetMultipleFiles();
    }

    private async void CreateProductOnSubmit()
    {
        var content = new MultipartFormDataContent()
        {
            { new StringContent(CreateDto.ProductName), "ProductName" },
            { new StringContent(CreateDto.ProductDescription), "ProductDescription" },
            { new StringContent(CreateDto.ProductPrice.ToString()), "ProductPrice" },
        };

        foreach (var selectedCategory in SelectedCategories)
        {
            content.Add(new StringContent(selectedCategory), "Categories");
        }

        foreach (var file in files)
        {
            StreamContent fileContent = new StreamContent(file.OpenReadStream(file.Size));
            fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data")
            {
                Name = "\"Files\"",
                FileName = $"\"{file.Name}\""
            };
            fileContent.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");

            content.Add(fileContent);
        }

        await ProductApi.CreateProduct(content);
        
        await Task.Delay(2000);
        
        ViewModel = await ProductApi.GetEditableProducts();
        
        StateHasChanged();  
    }
    
    private async Task DeleteProduct(Guid productId)
    {
        await ProductApi.DeleteProduct(productId);
        
        ViewModel = await ProductApi.GetEditableProducts();
    }
}