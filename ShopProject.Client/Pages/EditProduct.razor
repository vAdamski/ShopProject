@page "/EditProduct/{productId}"
@using ShopProject.Shared.Dtos.Products
@using ShopProject.Shared.ViewModels
@using ShopProject.Client.ApiBrokers
@using System.Net.Http.Headers
@using ShopProject.Shared.Dtos
@inject IProductCategoriesApi ProductCategoriesApi
@inject IProductApi ProductsApi
@inject NavigationManager NavigationManager

<style>
    .form-select[multiple] option:checked {
        background-color: #007bff; /* Set your desired blue color */
        color: #ffffff; /* Set text color for better visibility */
    }
</style>


<AuthorizeView Policy="Admin">
    <Authorized>
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header text-center">
                            Edytuj produkt
                        </div>
                        <div class="card-body">
                            <EditForm Model="@ProductDto" Context="formContext">
                                <div class="input-group mb-3">
                                    <span for="productName" class="input-group-text">Nazwa produktu</span>
                                    <InputText id="productName" @bind-Value="ProductDto.ProductName" class="form-control"/>
                                </div>

                                <div class="input-group mb-3">
                                    <span for="productDescription" class="input-group-text">Opis produktu</span>
                                    <InputText id="productDescription" @bind-Value="ProductDto.ProductDescription" class="form-control"/>
                                </div>

                                <div class="input-group mb-3">
                                    <span for="productPrice" class="input-group-text">Cena produktu</span>
                                    <InputNumber id="productPrice" @bind-Value="ProductDto.ProductPrice" class="form-control"/>
                                </div>

                                <div class="form-group">
                                    <label>Kategorie:</label>
                                    <div>
                                        <div class="multiple-selector mb-3">
                                            <ul class="selectable-ul">
                                                @foreach (var item in NoSelected)
                                                {
                                                    <li @onclick="() => Select(item)">@item.CategoryName</li>
                                                }
                                            </ul>
                                            <div class="multiple-selector-buttons">
                                                <button type="button" @onclick="SelectAll">
                                                    &gt &gt
                                                </button>
                                                <button type="button" @onclick="DeselectAll">
                                                    &lt &lt
                                                </button>
                                            </div>
                                            <ul class="selectable-ul">
                                                @foreach (var item in Selected)
                                                {
                                                    <li @onclick="() => Deselect(item)">@item.CategoryName</li>
                                                }
                                            </ul>
                                        </div>
                                    </div>
                                </div>


                                <div class="mb-3">
                                    @foreach (var productImage in ProductDto.Images)
                                    {
                                        <div class="card mb-3">
                                            <div class="card-body">
                                                <div class="container-fluid">
                                                    <div class="row">
                                                        <div class="col-3">
                                                            <img src="https://localhost:6001/api/files/@productImage.Id" style="max-height: 50px">
                                                        </div>
                                                        <div class="col"></div>
                                                        <div class="col-1">
                                                            <InputCheckbox @bind-Value="productImage.IsMain" @onclick="() => SetMainImage(productImage.Id)"/>
                                                        </div>
                                                        <div class="col-1">
                                                            <button class="btn btn-danger" @onclick="() => DeleteProductImage(productImage.Id)">Usuń</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }

                                    <div class="input-group mb-3">
                                        <span class="input-group-text" for="FileInput">Dodaj zdjęcie</span>
                                        <InputFile id="FileInput" class="form-control" OnChange="HandleFileInput"/>
                                        <a class="btn btn-outline-secondary" @onclick="AddProductImage">Dodaj</a>
                                    </div>
                                </div>


                                <button type="submit" class="btn btn-primary mb-2" @onclick="EditProductOnSubmit">Zapisz</button>
                                <button class="btn btn-danger mb-2" @onclick="BackToList">Anuluj</button>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        Not authorized!
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public string productId { get; set; }

    public EditableProductDto ProductDto { get; set; } = new();
    public IBrowserFile? file { get; set; }

    public List<ProductCategoryDto> Selected { get; set; } = new();
    public List<ProductCategoryDto> NoSelected { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        ProductDto = await ProductsApi.GetEditableProductDto(productId);

        if (ProductDto.Images.Count(x => x.IsMain) == 0 && ProductDto.Images.Count > 0)
        {
            ProductDto.Images.First().IsMain = true;
        }

        var productCategories = await ProductCategoriesApi.GetListProductCategories();

        NoSelected = productCategories.ProductCategories.ToList();

        var itemsToRemove = new List<ProductCategoryDto>();

        foreach (var category in NoSelected)
        {
            if (ProductDto.Categories.Select(x => x.Id).Contains(category.Id))
            {
                itemsToRemove.Add(category);
                Selected.Add(category);
            }
        }
        itemsToRemove.ForEach(category => NoSelected.Remove(category));
    }

    private void Select(ProductCategoryDto productCategoryDto)
    {
        Selected.Add(productCategoryDto);
        NoSelected.Remove(productCategoryDto);
    }

    private void Deselect(ProductCategoryDto productCategoryDto)
    {
        NoSelected.Add(productCategoryDto);
        Selected.Remove(productCategoryDto);
    }

    private void SelectAll()
    {
        Selected.AddRange(NoSelected);
        NoSelected.Clear();
    }

    private void DeselectAll()
    {
        NoSelected.AddRange(Selected);
        Selected.Clear();
    }

    private void HandleFileInput(InputFileChangeEventArgs e)
    {
        file = e.GetMultipleFiles(1).FirstOrDefault();
    }

    private async void EditProductOnSubmit()
    {
        MultipartFormDataContent content = new();

        content.Add(new StringContent(ProductDto.ProductId.ToString()), "ProductId");
        content.Add(new StringContent(ProductDto.ProductName), "ProductName");
        content.Add(new StringContent(ProductDto.ProductDescription), "ProductDescription");
        content.Add(new StringContent(ProductDto.ProductPrice.ToString()), "ProductPrice");
        content.Add(new StringContent(ProductDto.Images.First(x => x.IsMain).Id.ToString() ?? ""), "MainImageId");

        foreach (var category in Selected.Select(x => x.Id.ToString()))
        {
            content.Add(new StringContent(category), "Categories");
        }

        await ProductsApi.EditProduct(content);

        NavigationManager.NavigateTo("/productsManager");
    }

    private async void AddProductImage()
    {
        if (file is null)
        {
            return;
        }

        MultipartFormDataContent content = new();

        content.Add(new StringContent(ProductDto.ProductId.ToString()), "ProductId");

        StreamContent fileContent = new StreamContent(file.OpenReadStream(file.Size));
        fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data")
        {
            Name = "\"File\"",
            FileName = $"\"{file.Name}\""
        };
        fileContent.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");

        content.Add(fileContent);

        await ProductsApi.AddImageToProduct(content);

        var updatedProduct = await ProductsApi.GetEditableProductDto(productId);

        file = null;
        ProductDto.Images = updatedProduct.Images;

        StateHasChanged();
    }

    private async void DeleteProductImage(Guid imageId)
    {
        await ProductsApi.DeleteImageFromProduct(ProductDto.ProductId.ToString(), imageId.ToString());

        await Task.Delay(400);

        var updatedProduct = await ProductsApi.GetEditableProductDto(productId);

        ProductDto.Images = updatedProduct.Images;


        StateHasChanged();
    }

    private void SetMainImage(Guid imageId)
    {
        ProductDto.Images.ForEach(x => x.IsMain = false);
        ProductDto.Images.First(x => x.Id == imageId).IsMain = true;
    }

    private void BackToList()
    {
        NavigationManager.NavigateTo("/productsManager");
    }

}